configuration
    read with libjson-c
    max I/O data size per message
    max message latency
    log sink
    default shell
environment
    shell
filename
    shell in command's name?
command line
    can we have any options?

can tlog be used as sudo shell?
    we can allow commands starting with "tlog" only
    assign shell for target user?

publish design document on FreeIPA wiki

Retrieve character encoding and convert to UTF-8 in JSON.
For the time being check encoding and abort with a message saying only UTF-8
is supported.

Add message versions

Refactor tlog.c

Add throttling.

Provide comprehensive object descriptions in header files.

Make all if statements use braces, even single-line ones.

Consider pluggable memory allocation when library grows bigger and there is a
potential for outside users.

Make tlog_msg functions return diverse global return codes to help with
debugging parsing errors.

Test the code with coverity.

Consider supporting merging several messages into a single packet when
reading.

Consider merging window and io messages for simplicity.

Check if there is a way to unify init/cleanup and create/destroy function
presence across object types.

Consider making source and sinks abstract, renaming existing ones to
tlog_json_source/sink, and adding terminal source/sink named
tlog_term_source/sink.

Use "locale charmap" or equivalent to get terminal encoding.

Consider using iconv for detecting invalid multibyte sequences - it seems to
be able to stop on first invalid byte. Check how far back this functionality
goes and whether e.g. RHEL6 supports it. Still need encoding knowledge to
resync. Perhaps we can play two iconv descriptors: one normal and another
discarding invalid characters (with "//IGNORE" encoding suffix) to somehow
extract invalid bytes.

Support running without a terminal.

Support passing arguments to the user's shell.

Print a (configurable) warning upon starting the recorded session. By default
it should say the session is being recorded. Do it in the child process,
before starting the shell.

Record terminal type as well.

Consider the possibility of using tlog in a jump server.

Consider renaming "timing" to "meta".

Implement a test for decoding what was encoded.

Make each message start with window size.

Consider using milliseconds since epoch as the "pos" value.

Consider making separate record types for skipping input/output characters and
for reading input/output bytes. This should make the implementation simpler.

Refactor transaction backup/restore to use single function and define it using
macros.
